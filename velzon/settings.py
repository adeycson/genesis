"""
Django settings for velzon project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
# Imagine que você precisa conversar com o sistema operacional do seu computador, como se quisesse perguntar "onde estou?" ou "como chego até a pasta de documentos?". Para isso, precisamos de uma ferramenta que fale a língua do sistema operacional. O 'import os' é como se contratássemos um intérprete para nos ajudar nessa comunicação.
import os

# Agora, pense em um mapa que mostra todos os caminhos e atalhos para encontrar arquivos no seu computador. A classe Path é como esse mapa, nos ajudando a encontrar e trabalhar com esses caminhos de uma maneira fácil, quase como se estivéssemos navegando por uma cidade com a ajuda de um GPS.
from pathlib import Path

# Sabe quando você joga um videogame e recebe mensagens na tela informando sobre suas conquistas ou avisos importantes? No Django, usamos algo parecido para comunicar mensagens aos usuários do site. Importar 'constants as messages' é como definir um conjunto de regras sobre como essas mensagens devem aparecer, garantindo que elas sejam entregues de forma clara e no momento certo.
from django.contrib.messages import constants as messages


# Imagine que você tem uma caixa de ferramentas em sua casa. Para encontrar essa caixa, você precisa saber onde ela está. No nosso projeto, o 'BASE_DIR' funciona como um mapa que mostra onde está a "caixa de ferramentas" do nosso projeto no computador. Ele diz: "Olhe aqui! Aqui é onde tudo começa". Ele faz isso olhando para o lugar onde o mapa (neste caso, o arquivo que estamos editando) está, e então, considera a "casa" (ou diretório raiz do projeto) sendo dois níveis acima.
BASE_DIR = Path(__file__).resolve().parent.parent

# Início da configuração básica para desenvolvimento, não recomendada para ambientes de produção.
# Documentação para checklist de implantação: https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# Agora, pense em um diário secreto onde você guarda todos os seus segredos. No Django, temos algo parecido chamado 'SECRET_KEY'. É uma chave única que ajuda a manter o nosso site seguro, como uma senha especial que só o nosso projeto conhece. É muito importante que essa chave fique em segredo, especialmente quando outras pessoas podem tentar espiar nossos segredos (ou, em termos de internet, quando nosso site está disponível para o público).
SECRET_KEY = 'django-insecure-j%^*y0krq5^-#3lggoecxw!d7ad_gqkab3t5w17&0w06+qf8+8'


# Sabe quando você está aprendendo algo novo, e é mais fácil fazer isso em um ambiente onde erros são permitidos e podem ser corrigidos sem grandes consequências? O 'DEBUG = True' é como dizer ao nosso projeto: "Tudo bem cometer erros enquanto aprendemos e construímos". Mas, como em uma sala de aula, onde certas coisas devem ficar entre professor e alunos, não queremos que esses erros sejam vistos por todos quando o site estiver aberto ao público, ou seja, em "produção".
DEBUG = True

# Imagine que sua casa tem uma porta que só abre com uma chave especial. Mas, se você decidir que não quer usar a chave e deixar a porta aberta para qualquer um entrar, você colocaria um sinal dizendo "Todos são bem-vindos". No nosso projeto, 'ALLOWED_HOSTS = ['*']' é como esse sinal na porta. Dizemos ao nosso site que ele pode aceitar visitas de qualquer lugar, não apenas de alguns convidados especiais. Mas cuidado, em um site real, você quer ter mais controle sobre quem pode visitar.
ALLOWED_HOSTS = ['*']

# Agora, vamos pensar no nosso projeto como uma cidade pequena. Essa cidade precisa de serviços básicos para funcionar bem, como uma prefeitura, uma delegacia, uma biblioteca, etc. Em Django, esses serviços são chamados de "apps". A lista 'DEFAULT_APPS' é como o plano da cidade, mostrando todos os serviços essenciais que já vem com ela. Cada 'app' adiciona uma funcionalidade específica, como gerenciar as pessoas da cidade (usuários), guardar livros (conteúdos), organizar eventos (sessões), comunicar notícias (mensagens), mostrar caminhos e placas (arquivos estáticos), e até permitir que a cidade faça parte de um país maior (sites).
DEFAULT_APPS = [    
    'django.contrib.admin',  # Como a prefeitura, onde se administra a cidade.
    'django.contrib.auth',  # Como a delegacia, que cuida da segurança e identidade das pessoas.
    'django.contrib.contenttypes',  # Como a biblioteca, organizando os tipos de conteúdo (livros, revistas).
    'django.contrib.sessions',  # Como eventos da cidade, que acontecem e depois acabam, mas deixam memórias.
    'django.contrib.messages',  # Como o sistema de correios, enviando mensagens entre os cidadãos.
    'django.contrib.staticfiles',  # Como as placas e caminhos da cidade, mostrando onde as coisas estão.
    'django.contrib.sites',  # Como permitir que nossa cidade faça parte de um país maior, interligando-a a outros lugares.
]

    
# LOCAL_APPS são como os departamentos internos da sua empresa SaaS, cada um com uma função crítica para manter a operação fluindo suavemente:
LOCAL_APPS = [
    "dashboards",  # "dashboards" é o departamento de análise e relatórios, onde dados importantes são organizados para ajudar na tomada de decisões.
    "apps",  # "apps" é o departamento de projetos especiais, sempre pronto para desenvolver novas ideias e soluções.
    "layouts",  # "layouts" é a equipe de design de experiência do usuário, garantindo que todos os produtos sejam fáceis de usar e agradáveis.
    "components",  # "components" é como a engenharia de componentes reutilizáveis, criando blocos de construção que podem ser usados em vários produtos.
    "pages"  # "pages" é o departamento de conteúdo e comunicação, responsável por criar e manter o conteúdo acessível aos usuários.
]

# THIRDPARTY_APPS são como os parceiros e fornecedores externos que complementam os serviços que sua empresa SaaS oferece:
THIRDPARTY_APPS = [
    "crispy_forms",  # "crispy_forms" é como um parceiro especializado em criar interfaces de formulários atraentes e funcionais para coletar informações dos usuários.
    "crispy_bootstrap5",  # "crispy_bootstrap5" é o fornecedor de design que trabalha com "crispy_forms" para garantir que tudo esteja no mais alto padrão visual.
    
    # Allauth é como uma agência de segurança cibernética contratada para gerenciar o acesso dos usuários e a autenticação, garantindo que apenas pessoas autorizadas possam acessar serviços sensíveis.
    'allauth',  # O corpo principal da agência de segurança.
    'allauth.account',  # Especializado em autenticação tradicional, como senhas e nomes de usuário.
    'allauth.socialaccount',  # Encarregado da autenticação social, permitindo que os usuários se conectem através de suas contas em redes sociais.
    
    'allauth.socialaccount.providers.google',  # Um especialista em verificar identidades usando o Google, facilitando um processo de login rápido e seguro.
    'multiselectfield',  # É como um serviço de personalização, permitindo que os usuários escolham exatamente o que precisam, melhorando a experiência do usuário.
]


# INSTALLED_APPS é como o inventário completo dos departamentos e parceiros que a sua empresa SaaS precisa para operar. Aqui, combinamos:
# 1. Os departamentos internos (DEFAULT_APPS),
# 2. Equipes de inovação e projetos especiais (LOCAL_APPS),
# 3. E os parceiros e fornecedores externos (THIRDPARTY_APPS).
# Juntos, eles formam o ecossistema completo do seu serviço online, garantindo que você tenha todas as funcionalidades necessárias para atender aos seus usuários.
INSTALLED_APPS = DEFAULT_APPS + LOCAL_APPS + THIRDPARTY_APPS

# MIDDLEWARE é como o sistema de segurança e operações de um grande edifício de escritórios, onde sua empresa SaaS opera. Cada item na lista funciona como um especialista ou equipe específica que gerencia um aspecto vital do fluxo de trabalho e segurança:
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Como os guardas de segurança na entrada, protegendo contra invasores e garantindo que tudo esteja seguro.
    'django.contrib.sessions.middleware.SessionMiddleware',  # Como os recepcionistas, que identificam e orientam os visitantes (usuários) para as áreas corretas, gerenciando suas "sessões" de visita.
    'django.middleware.common.CommonMiddleware',  # A equipe de manutenção, garantindo que tudo funcione suavemente, corrigindo problemas comuns antes que afetem os usuários.
    'django.middleware.csrf.CsrfViewMiddleware',  # Especialistas em segurança cibernética, protegendo contra tipos específicos de ataques (CSRF) que tentam enganar o sistema.
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Como os sistemas de cartão de acesso, verificando a identidade dos usuários antes de permitir acesso a áreas restritas.
    'django.contrib.messages.middleware.MessageMiddleware',  # O sistema de comunicação interna, permitindo enviar e receber mensagens importantes durante a "visita" do usuário.
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Como o vidro à prova de balas, protegendo os usuários de tentativas de "sequestro" da interface por sites maliciosos.
    'allauth.account.middleware.AccountMiddleware',  # A equipe da agência de segurança cibernética, oferecendo serviços adicionais para gerenciar contas de forma mais segura e eficiente.
]


# ROOT_URLCONF é como o mapa do shopping center que mostra todas as lojas e onde elas estão localizadas. No nosso sistema SaaS, este "mapa" diz ao Django onde encontrar todas as "lojas" (ou páginas) do nosso site, garantindo que os usuários possam navegar corretamente para onde querem ir.
ROOT_URLCONF = 'velzon.urls'

# TEMPLATES são como os planos de design para cada loja no shopping. Eles dizem como cada loja deve parecer por dentro, onde colocar os produtos e como apresentá-los aos clientes. No Django, essa configuração nos ajuda a determinar como as páginas da web devem ser exibidas para os usuários:
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Isso escolhe a equipe de design (ou motor de templates) que vamos usar, o padrão do Django, conhecido por ser eficiente e fácil de trabalhar.
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Aqui, dizemos onde encontrar os "planos de design" personalizados, ou templates, que criamos especificamente para o nosso site.
        'APP_DIRS': True,  # Isso permite que o Django automaticamente procure por templates dentro de cada aplicativo, facilitando a organização e a reutilização de designs.
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Isso inclui informações de depuração nos designs, como etiquetas de preço que só os funcionários podem ver, para ajudar a identificar problemas.
                'django.template.context_processors.request',  # Adiciona informações sobre o pedido do cliente (ou requisição web) aos designs, permitindo personalizar a experiência de cada visitante.
                'django.contrib.auth.context_processors.auth',  # Isso inclui informações sobre o cliente (usuário), como nome e status de login, nos designs, para uma saudação personalizada.
                'django.contrib.messages.context_processors.messages',  # Adiciona mensagens, como promoções ou avisos, que podem ser mostradas aos clientes enquanto eles navegam no site.
            ],
        },
    },
]


# AUTHENTICATION_BACKENDS é como ter diferentes portas de entrada para o seu prédio de escritórios. Cada porta permite uma forma diferente de verificar quem você é antes de entrar:
AUTHENTICATION_BACKENDS = [
    # A primeira porta é a entrada padrão, onde você usa seu crachá de identificação (nome de usuário) para entrar. É o método básico que o próprio Django oferece.
    'django.contrib.auth.backends.ModelBackend',
    # A segunda porta é mais moderna e permite que você use seu e-mail como crachá digital. Isso é possível graças a um sistema especial chamado 'allauth', que é como um segurança tecnológico que reconhece diferentes tipos de crachá.
    'allauth.account.auth_backends.AuthenticationBackend',
]

# CRISPY_ALLOWED_TEMPLATE_PACKS e CRISPY_TEMPLATE_PACK são como especificar o código de vestimenta e o fornecedor de uniformes para sua empresa. Crispy Forms garante que todos os formulários (como formulários de feedback ou inscrição) sigam um padrão visual agradável e profissional.
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"  # Isso diz que estamos permitindo um código de vestimenta baseado no "Bootstrap 5", um estilo moderno e responsivo para nossos formulários.
CRISPY_TEMPLATE_PACK = "bootstrap5"  # E decidimos que o "Bootstrap 5" não é apenas permitido, mas será o padrão para todos os nossos uniformes (formulários), garantindo que tudo tenha uma aparência coesa e profissional.


# WSGI_APPLICATION é como o sistema de metrô da cidade, que conecta diferentes partes da cidade (o seu site Django) com o mundo exterior (o servidor web). Assim como os trens transportam pessoas de um lugar para outro, o WSGI transporta informações entre o seu site e a internet.
WSGI_APPLICATION = 'velzon.wsgi.application'

# A configuração do banco de dados é como o sistema de armazenamento de água da cidade, onde toda a água (dados) é armazenada, tratada e distribuída para casas (partes do seu site) conforme necessário.
DATABASES = {
    'default': {  # "default" é o reservatório principal de onde a cidade pega sua água.
        'ENGINE': 'django.db.backends.postgresql',  # "PostgreSQL" é como um sistema de filtragem avançado que garante a qualidade da água.
        'NAME': 'saas_db',  # O nome do reservatório, identificando-o entre muitos outros possíveis.
        'USER': 'adeycson',  # O técnico responsável pela operação e manutenção do reservatório.
        'PASSWORD': 'gnzZREX55Zr0MmMp6fUE5eHKOzdJc4TZ',  # A chave que permite ao técnico acessar e operar o sistema de filtragem.
        'HOST': 'dpg-cmui4gf109ks73c2klm0-a.oregon-postgres.render.com',  # A localização do reservatório na vasta rede de infraestrutura da cidade.
        'PORT': '5432',  # O número do portão através do qual a água é distribuída para a cidade.
    }
}


# Validação de senha é como o processo de escolher uma senha segura para um clube exclusivo online. Este clube quer ter certeza de que todos os membros escolham senhas fortes para proteger suas contas e informações pessoais. Os critérios para uma senha forte são como as regras para entrar no clube:
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        # Este é como o porteiro que verifica se a senha é muito parecida com seu nome, sobrenome ou e-mail. Se for, ele diz que é fácil demais para alguém adivinhar e pede para você tentar outra coisa.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        # Este critério é como uma regra que diz que sua senha deve ser longa o suficiente, como uma senha com um número mínimo de caracteres. É como dizer que você precisa estar bem vestido para entrar no clube.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        # Aqui, o clube verifica se sua senha é uma daquelas muito comuns e fáceis de adivinhar, como "123456" ou "senha". Se for, eles não vão deixar você usar, porque querem garantir que todos os membros estejam mais seguros.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        # Este é como uma regra que diz que sua senha não pode ser toda feita de números. É como o clube dizer que não basta apenas usar um número de telefone ou data de aniversário como senha; eles querem algo mais complicado para aumentar a segurança.
    },
]




# Configurações de internacionalização são como garantir que todos os convidados de diferentes países se sintam bem-vindos no evento, oferecendo sinais e serviços no idioma deles:
LANGUAGE_CODE = 'pt-br'  # Isso é como decidir que o idioma oficial do evento será o 'Português Brasil', garantindo que todos os sinais e anúncios sejam nesse idioma.

TIME_ZONE = 'America/Sao_Paulo'  # Isso define o relógio do evento para a hora de 'São Paulo', assegurando que todos estejam sincronizados, não importa de onde venham.

USE_I18N = True  # Habilita a equipe do evento a traduzir tudo para vários idiomas, tornando o evento acessível para pessoas de todo o mundo.

USE_L10N = True  # Isso é como ajustar todos os relógios e calendários do evento para se adaptarem ao formato local de cada convidado, seja ele americano, europeu, etc.

USE_TZ = True  # Garante que, não importa onde os convidados estejam, o evento sempre mostrará a hora certa para eles, considerando seu próprio fuso horário.

# Configurações de arquivos estáticos são como preparar todos os banners, folhetos e decorações antes do evento:
STATIC_URL = '/static/'  # Isso é como dizer onde os convidados podem encontrar todos os banners e folhetos digitais do evento.
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]  # Aqui decidimos quais salas do evento serão decoradas com esses materiais.
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Isso é o armazém onde guardamos todas as decorações antes de distribuí-las pelo evento.

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Isso é como ter um estúdio de fotografia no evento, onde guardamos todas as fotos e vídeos.
MEDIA_URL = '/media/'  # E aqui é como dizer aos convidados onde eles podem ver todas essas fotos e vídeos.

# Configuração padrão do tipo de campo de chave primária é como decidir usar um sistema de registro avançado para rastrear cada participação no evento:
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # Isso é como dar a cada participante um número de identificação único, garantindo que cada registro seja único e bem organizado.


# Imagine que estamos ajustando o sistema de comunicação e segurança para um grande festival online, garantindo que as mensagens sejam claras e que a correspondência seja segura:

# Personalização das tags de mensagens:
# É como definir códigos de cores para diferentes tipos de avisos no festival:
MESSAGE_TAGS = {
    messages.DEBUG: "alert-info",  # Informações gerais são azuis, como um lembrete amigável sobre onde encontrar o mapa do festival.
    messages.INFO: "alert-info",  # Avisos informativos também são azuis, talvez sobre o início de um novo show.
    messages.SUCCESS: "alert-success",  # Notícias boas são verdes, como confirmar seu ingresso para um evento especial.
    messages.WARNING: "alert-warning",  # Avisos importantes são amarelos, como um lembrete para beber água.
    messages.ERROR: "alert-danger",  # Problemas ou erros são vermelhos, alertando sobre uma falha no pagamento.
}

# Configuração do SMTP para envio de e-mails:
# Pensando no festival como um grande evento que precisa se comunicar com milhares de participantes:
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Usamos um sistema postal digital (SMTP) para enviar nossas mensagens.
EMAIL_HOST = 'smtp.sendgrid.net'  # SendGrid é como a nossa central de correios digital, especializada em enviar grandes volumes de e-mail.
EMAIL_PORT = 587  # A porta 587 é como escolher um serviço de entrega expressa confiável para nossas mensagens.
EMAIL_USE_TLS = True  # TLS garante que todas as mensagens sejam seladas e entregues de forma segura, protegendo contra bisbilhoteiros.
EMAIL_HOST_USER = 'crm@sistemagenesis.tech'  # O endereço de e-mail do festival, de onde todas as comunicações são enviadas.
EMAIL_HOST_PASSWORD = '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'  # A chave secreta para acessar nossa central de correios digital e enviar e-mails.
DEFAULT_FROM_EMAIL = 'crm@sistemagenesis.tech'  # O endereço que aparece como remetente quando os participantes recebem nossas mensagens.

EMAIL_SSL_CERTFILE = False  # Isso diz que não precisamos de um certificado especial para nossa correspondência eletrônica, simplificando o processo.
EMAIL_SSL_KEYFILE = False  # Similarmente, não precisamos de uma chave especial, mantendo a simplicidade na nossa comunicação.

# Juntando tudo, estas configurações garantem que o festival possa enviar mensagens claras e coloridas para os participantes, enquanto mantém a comunicação por e-mail segura e eficiente, como um sistema postal moderno para um evento global.


# Configurações do AllAuth são como as regras de um clube exclusivo online, garantindo que todos os membros entrem e saiam de forma segura e eficiente:

# LOGIN_REDIRECT_URL é como a área de boas-vindas onde os membros são direcionados depois de entrar com sucesso. Aqui, "/" significa a página inicial do clube.
LOGIN_REDIRECT_URL = "/"

# LOGIN_URL é a porta da frente do clube, onde os visitantes precisam passar para provar que são membros antes de entrar. "account_login" é como um porteiro digital que verifica sua identidade.
LOGIN_URL = "account_login"

# ACCOUNT_LOGOUT_ON_GET como dizer que para sair do clube, você não pode apenas acenar para o porteiro; você precisa passar por um processo de checkout para garantir que é seguro deixar o local. Isso evita saídas acidentais.
ACCOUNT_LOGOUT_ON_GET = False

# ACCOUNT_EMAIL_REQUIRED é como a regra do clube que diz que todos precisam fornecer um e-mail válido na entrada. Isso garante que o clube possa entrar em contato com você sobre eventos futuros e atualizações.
ACCOUNT_EMAIL_REQUIRED = True

# ACCOUNT_EMAIL_VERIFICATION é a política de verificar o e-mail de todos os novos membros para garantir que eles são quem dizem ser. "mandatory" significa que essa etapa é obrigatória para se tornar um membro.
ACCOUNT_EMAIL_VERIFICATION = "mandatory"

# ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS é como ter um sistema que, se você já está dentro do clube, não precisa passar pela entrada novamente; você é redirecionado para onde a ação está acontecendo.
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True

# ACCOUNT_UNIQUE_EMAIL garante que cada e-mail no clube seja único, como uma carteira de identidade digital, assegurando que cada membro tenha sua própria identificação exclusiva.
ACCOUNT_UNIQUE_EMAIL = True

# SOCIALACCOUNT_LOGIN_ON_GET permite que os membros usem suas contas de redes sociais para entrar rapidamente no clube com apenas um clique, tornando o processo de entrada tão fácil quanto dizer "oi" para o porteiro.
SOCIALACCOUNT_LOGIN_ON_GET = True

# Essas configurações do AllAuth são projetadas para tornar a experiência de entrar, participar e sair do seu sistema SaaS tão suave e segura quanto visitar seu clube online favorito, onde cada detalhe, da entrada à saída, é cuidadosamente planejado para a segurança e satisfação dos membros.



# Personalização de formulários do AllAuth é como customizar a entrada, o registro e os balcões de atendimento da sua loja online para garantir que os clientes tenham uma experiência única e direta:
ACCOUNT_FORMS = {
    "login": "velzon.forms.UserLoginForm",  # Um tapete de boas-vindas personalizado para quando os clientes entram.
    "signup": "velzon.forms.UserRegistrationForm",  # Um formulário de inscrição, como um cartão de fidelidade especial para novos membros.
    "change_password": "velzon.forms.PasswordChangeForm",  # Um balcão de serviço onde os clientes podem atualizar a senha, como alterar o PIN do cartão de sócio.
    "set_password": "velzon.forms.PasswordSetForm",  # Um quiosque para criar uma nova senha, como definir um código para um armário privado.
    "reset_password": "velzon.forms.PasswordResetForm",  # Um guichê de ajuda para quando os clientes esquecem a senha, como um serviço de redefinição de PIN.
    "reset_password_from_key": "velzon.forms.PasswordResetKeyForm",  # Um procedimento de segurança adicional para confirmar a identidade antes de redefinir a senha.
}

# SOCIALACCOUNT_QUERY_EMAIL é como ter um assistente virtual que preenche automaticamente o endereço de e-mail dos clientes com base nas informações da conta de mídia social, tornando o processo de inscrição mais rápido e menos tedioso.
SOCIALACCOUNT_QUERY_EMAIL = True

# SITE_ID é como o número de identificação da sua loja no grande shopping digital. No nosso caso, "2" pode ser o número que diferencia sua loja de outras no mesmo espaço online.
SITE_ID = 2

# Configurações específicas para provedores de autenticação social, neste caso, Google, são como oferecer uma entrada VIP através da conta Google dos seus clientes:
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [  # O escopo é como as informações que você solicita aos clientes para usar essa entrada VIP, como nome e e-mail.
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {  # Parâmetros específicos, como "acesso online", garantem que a entrada VIP seja rápida e não guarde as chaves da casa do cliente.
            'access_type': 'online',
        }
    }
}
